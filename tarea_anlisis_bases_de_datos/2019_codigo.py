# -*- coding: utf-8 -*-
"""2019_CODIGO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1q_86bsHU30O9B7EU04yBXdQleGDr9166
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

csv_path = "/content/Investigadores_Reconocidos_por_convocatoria_20250909.csv"  # ajusta si cambia
df = pd.read_csv(csv_path, encoding="utf-8", low_memory=False)
df.columns = [c.strip().replace("\n"," ").replace("\r"," ").strip() for c in df.columns]

print("Dimensiones:", df.shape)
display(df.head(10))

# Faltantes
n = len(df)
falt = (df.isna().sum().rename("n_missing").to_frame()
        .assign(pct_missing=lambda x: (100*x["n_missing"]/n).round(2))
        .reset_index().rename(columns={"index":"variable"})
        .sort_values(["pct_missing","n_missing"], ascending=False))
display(falt)

# Detectar columnas clave por nombre
col_genero = next((c for c in df.columns if "GENER" in c.upper()), None)
col_region_res = next((c for c in df.columns if "REGION" in c.upper() and "RES" in c.upper()), None)
col_depto_nac = next((c for c in df.columns if "DEPARTAMENTO" in c.upper() and "NAC" in c.upper()), None)
col_depto_res = next((c for c in df.columns if "DEPARTAMENTO" in c.upper() and "RES" in c.upper()), None)

def top_counts(colname, k=10):
    vc = df[colname].value_counts(dropna=False).head(k)
    tbl = vc.rename_axis(colname).to_frame("conteo")
    tbl["porcentaje"] = (100*tbl["conteo"]/n).round(2)
    return tbl

# Calcular faltantes
n = len(df)
faltantes = (
    df.isna().sum()
    .rename("n_missing")
    .to_frame()
    .assign(pct_missing=lambda x: (100 * x["n_missing"] / n).round(2))
    .reset_index()
    .rename(columns={"index": "variable"})
    .sort_values("pct_missing", ascending=False)
)

# Graficar (Top 15 variables con más faltantes)
top = faltantes.head(15)
plt.figure(figsize=(10,6))
plt.barh(top["variable"], top["pct_missing"], color="salmon")
plt.xlabel("Porcentaje de faltantes (%)")
plt.ylabel("Variable")
plt.title("Top 15 Variables con Mayor % de Faltantes")
plt.gca().invert_yaxis()  # Para que la más alta aparezca arriba

# Etiquetas con el porcentaje exacto
for i, (v, pct) in enumerate(zip(top["variable"], top["pct_missing"])):
    plt.text(pct + 0.5, i, f"{pct:.1f}%", va="center")

plt.tight_layout()
plt.show()

# Frecuencias
if col_genero:     display(top_counts(col_genero, 10))
if col_region_res: display(top_counts(col_region_res, 15))
if col_depto_nac:  display(top_counts(col_depto_nac, 15))
if col_depto_res:  display(top_counts(col_depto_res, 15))

# === GRAFICAS ===
# 1) Barras: género
if col_genero:
    vc = df[col_genero].value_counts(dropna=False)
    plt.figure(); vc.plot(kind="bar", title=f"Distribución de {col_genero}")
    plt.xlabel(col_genero); plt.ylabel("Conteo"); plt.xticks(rotation=0); plt.tight_layout(); plt.show()

# 2) Barras: Top regiones de residencia
if col_region_res:
    vc = df[col_region_res].value_counts(dropna=False).head(10)
    plt.figure(); vc.plot(kind="bar", title=f"Top 10 {col_region_res}")
    plt.xlabel(col_region_res); plt.ylabel("Conteo")
    plt.xticks(rotation=45, ha="right"); plt.tight_layout(); plt.show()

# 3) Barras: Top dptos nacimiento
if col_depto_nac:
    vc = df[col_depto_nac].value_counts(dropna=False).head(10)
    plt.figure(); vc.plot(kind="bar", title=f"Top 10 {col_depto_nac}")
    plt.xlabel(col_depto_nac); plt.ylabel("Conteo")
    plt.xticks(rotation=45, ha="right"); plt.tight_layout(); plt.show()

# 4) Barras: Top dptos residencia
if col_depto_res:
    vc = df[col_depto_res].value_counts(dropna=False).head(10)
    plt.figure(); vc.plot(kind="bar", title=f"Top 10 {col_depto_res}")
    plt.xlabel(col_depto_res); plt.ylabel("Conteo")
    plt.xticks(rotation=45, ha="right"); plt.tight_layout(); plt.show()

# 5) Heatmap: Género x Región de residencia (proporciones por fila)
if col_genero and col_region_res:
    ct = pd.crosstab(df[col_genero], df[col_region_res])
    row_props = ct.div(ct.sum(axis=1), axis=0)
    plt.figure(); plt.imshow(row_props, aspect="auto"); plt.colorbar()
    plt.title(f"Proporciones por {col_genero} x {col_region_res}")
    plt.yticks(range(len(row_props.index)), row_props.index)
    plt.xticks(range(len(row_props.columns)), row_props.columns, rotation=45, ha="right")
    plt.tight_layout(); plt.show()

# 6) Histogramas numéricos (excluyendo IDs/códigos)
def is_id_like(name):
    u = name.upper()
    return ("ID" in u) or ("COD" in u) or ("NRO" in u) or ("ORDEN" in u)

num_cols = [c for c in df.columns if pd.api.types.is_numeric_dtype(df[c])]
num_clean = [c for c in num_cols if not is_id_like(c)]
if len(num_clean) == 0:  # si no hay métricas continuas, graficamos 2 numéricas con mayor varianza
    var = pd.Series({c: df[c].var() for c in num_cols}).sort_values(ascending=False)
    num_clean = list(var.head(2).index)

for col in num_clean[:4]:
    plt.figure()
    df[col].dropna().plot(kind="hist", bins=30, title=f"Histograma: {col}")
    plt.xlabel(col); plt.ylabel("Frecuencia")
    plt.tight_layout(); plt.show()

# Verificar que exista la columna
if "NME_GRAN_AREA_PR" in df.columns:
    # Frecuencias
    vc = df["NME_GRAN_AREA_PR"].value_counts(dropna=False).head(10)
    total = len(df)

    # Graficar
    plt.figure(figsize=(8,5))
    vc.plot(kind="bar", color="skyblue")
    plt.title("Distribución de investigadores por Gran Área", fontsize=13)
    plt.xlabel("Gran Área de Conocimiento")
    plt.ylabel("Número de investigadores")
    plt.xticks(rotation=45, ha="right")

    # Etiquetas con porcentaje
    for i, v in enumerate(vc.values):
        pct = 100 * v / total
        plt.text(i, v + 50, f"{pct:.1f}%", ha="center", fontsize=9)

    plt.tight_layout()
    plt.show()
else:
    print("La columna 'NME_GRAN_AREA_PR' no existe en la base.")

# Verificar que existan las columnas
if "NME_GRAN_AREA_PR" in df.columns and "NME_GENERO_PR" in df.columns:
    # Tabla cruzada
    ct = pd.crosstab(df["NME_GRAN_AREA_PR"], df["NME_GENERO_PR"], normalize="index") * 100

    # Ordenar áreas por número total de investigadores
    orden = df["NME_GRAN_AREA_PR"].value_counts().index
    ct = ct.loc[orden]

    # Gráfico de barras apiladas
    ct.plot(kind="bar", stacked=True, figsize=(10,6), colormap="Paired")
    plt.title("Distribución de Género por Gran Área de Conocimiento (%)", fontsize=14)
    plt.ylabel("Porcentaje dentro del área")
    plt.xlabel("Gran Área de Conocimiento")
    plt.xticks(rotation=45, ha="right")
    plt.legend(title="Género")
    plt.tight_layout()
    plt.show()

else:
    print("La base no contiene las columnas 'NME_GRAN_AREA_PR' y/o 'NME_GENERO_PR'.")